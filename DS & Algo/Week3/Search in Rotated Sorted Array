class Solution:
    def search(self, nums: List[int], target: int) -> int:
        if not nums: return -1
        
        left = 0
        right= len(nums)-1
        
        while left < right:
            mid = (left + right)//2           
            if nums[mid]>nums[right]: #weird [4,5,6,7,0,1,2] ==> 7 > 2, so mid+1 may bepivot
                left=mid+1 
            else:
                right=mid
        
        start=left
        left=0
        right=len(nums)-1
        
        #Assign left and right pointer based on which "subarray" the target's in. 
        if target >= nums[start] and target<= nums[right]:
            left=start
        else:
            right=start
        
        #Normal Binary search in that "subarray"
        while left <= right:
            mid = (left + right)//2
            if target==nums[mid]:
                return mid
            elif target > nums[mid]:
                left = mid+1
            else:
                right=mid-1
        return -1
